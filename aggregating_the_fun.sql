-- Create the schema
DROP SCHEMA IF EXISTS aggregating_the_fun;
CREATE SCHEMA aggregating_the_fun;
USE aggregating_the_fun;


-- Create customers table
CREATE TABLE customers (
  customer_id INT PRIMARY KEY,
  first_name VARCHAR(255),
  last_name VARCHAR(255)
);

-- Insert sample data into customers table
INSERT INTO customers (customer_id, first_name, last_name) VALUES
(1, 'John', 'Doe'),
(2, 'Jane', 'Smith'),
(3, 'Mike', 'Johnson'),
(4, 'Emily', 'Brown');

-- Create products table
CREATE TABLE products (
  product_id INT PRIMARY KEY,
  product_name VARCHAR(255),
  category VARCHAR(255),
  price DECIMAL(10, 2)
);

-- Insert sample data into products table
INSERT INTO products (product_id, product_name, category, price) VALUES
(1, 'Product A', 'Electronics', 100.00),
(2, 'Product B', 'Electronics', 200.00),
(3, 'Product C', 'Home Appliances', 50.00),
(4, 'Product D', 'Home Appliances', 75.00);

-- Create orders table
CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  customer_id INT,
  total_price DECIMAL(10, 2),
  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

-- Insert sample data into orders table
INSERT INTO orders (order_id, customer_id, total_price) VALUES
(1, 1, 100.00),
(2, 2, 250.00),
(3, 1, 200.00),
(4, 3, 75.00),
(5, 4, 50.00),
(6, 2, 100.00);



-- Total number of customers
SELECT COUNT() FROM customers;

-- Total revenue generated by all sales.
SELECT SUM(total_price) FROM orders;

-- Average price of products.
SELECT AVG(price) FROM products;

-- Minimum price of products.
SELECT MIN(price) FROM products;

-- Maximum price of products.
SELECT MAX(price) FROM products;

-- Number of orders placed by each customer and sort by the total number of orders in decending order.
SELECT
	c.customer_id,
  c.first_name,
  c.last_name,
COUNT(o.order_id) AS total_orders 
FROM 
	customers c
LEFT JOIN
	orders o ON c.customer_id = o.customer_id
GROUP BY
	c.customer_id,
	c.first_name,
	c.last_name
ORDER BY
	total_orders DESC;
  
 -- Calculate total revenue by each customer and display the results sorted by total revenue in descending order.
 SELECT
  c.customer_id,
  c.first_name,
  c.last_name,
  SUM(p.price) AS total_revenue
FROM
  customers c
JOIN
  orders o ON c.customer_id = o.customer_id
JOIN
  products p ON o.order_id = p.product_id
GROUP BY
  c.customer_id,
  c.first_name,
  c.last_name
ORDER BY
  total_revenue DESC;
  
  -- Top 3 customers with the heighest total revenue and display the customer name and total revenue.
  SELECT
  c.first_name,
  c.last_name,
  SUM(p.price) AS total_revenue
FROM
  customers c
JOIN
  orders o ON c.customer_id = o.customer_id
JOIN
  products p ON o.order_id = p.product_id
GROUP BY
  c.customer_id,
  c.first_name,
  c.last_name
ORDER BY
  total_revenue DESC
LIMIT 3;

-- Calculate the average total price of orders for each customer and display the results sorted by average.
SELECT
  c.customer_id,
  c.first_name,
  c.last_name,
  AVG(o.total_price) AS average_total_price
FROM
  customers c
LEFT JOIN
  orders o ON c.customer_id = o.customer_id
GROUP BY
  c.customer_id,
  c.first_name,
  c.last_name
ORDER BY
  average_total_price DESC;